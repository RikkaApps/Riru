import org.apache.tools.ant.filters.FixCrLfFilter

apply plugin: 'idea'

idea.module {
    excludeDirs += file('out')
    resourceDirs += file('template')
    excludeDirs += file('template/aar')
    resourceDirs += file('scripts')
    resourceDirs += file('docs')
}

buildscript {
    ext.kotlin_version = '1.5.20'

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://s01.oss.sonatype.org/content/repositories/releases/"
        }
    }
}

ext {
    minSdkVersion = 23
    targetSdkVersion = 30
    ndkVersion = '21.4.7075529'

    riruApiVersion = 25
    riruMinApiVersion = 9

    gitCommitId = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
    gitCommitCount = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())

    versionNameMinor = 4
    versionNamePatch = 4

    outDir = file("$rootDir/out")
}

task clean(type: Delete) {
    delete rootProject.buildDir, outDir
}

def aarVersion = "${riruApiVersion}.0.1"
def aarDir = "out/aar/dev/rikka/ndk/riru/${aarVersion}"

task generateLibraryAar(type: Zip) {
    copy {
        from 'riru/src/main/cpp/include_riru/riru.h'
        into 'template/aar/riru.aar/prefab/modules/riru/include'
    }

    from 'template/aar/riru.aar'
    archiveName "riru-${aarVersion}.aar"
    destinationDir file(aarDir)
}

task signLibraryAar(type: Exec) {
    commandLine "gpg",
            "--armor",
            "--detach-sign",
            "--passphrase=${findProperty("signing.password")}",
            "--batch",
            "--yes",
            "riru-${aarVersion}.aar"
    workingDir aarDir
}

task generateLibraryPom(type: Copy) {
    from 'template/aar/riru.pom'
    into file(aarDir)
    filter { line -> line.replaceAll('%%%VERSION%%%', "$aarVersion") }
    filter(FixCrLfFilter.class,
            eol: FixCrLfFilter.CrLf.newInstance("lf"))
    rename { "riru-${aarVersion}.pom" }
}

task signLibraryPom(type: Exec) {
    commandLine "gpg",
            "--armor",
            "--detach-sign",
            "--passphrase=${findProperty("signing.password")}",
            "--batch",
            "--yes",
            "riru-${aarVersion}.pom"
    workingDir aarDir
}

task generateLibrarySourceJar(type: Zip) {
    from 'template/aar/riru-sources.jar'
    archiveName "riru-${aarVersion}-sources.jar"
    destinationDir file(aarDir)
}

task signLibrarySourceJar(type: Exec) {
    commandLine "gpg",
            "--armor",
            "--detach-sign",
            "--passphrase=${findProperty("signing.password")}",
            "--batch",
            "--yes",
            "riru-${aarVersion}-sources.jar"
    workingDir aarDir
}

task generateLibraryJavaDocJar(type: Zip) {
    from 'template/aar/riru-javadoc.jar'
    archiveName "riru-${aarVersion}-javadoc.jar"
    destinationDir file(aarDir)
}

task signLibraryJavaDocJar(type: Exec) {
    commandLine "gpg",
            "--armor",
            "--detach-sign",
            "--passphrase=${findProperty("signing.password")}",
            "--batch",
            "--yes",
            "riru-${aarVersion}-javadoc.jar"
    workingDir aarDir
}

task generateLibrary(type: GradleBuild) {
    tasks = [':generateLibraryAar', ':generateLibraryPom', ':generateLibrarySourceJar', ':generateLibraryJavaDocJar',
             ':signLibraryAar', ':signLibraryPom', ':signLibrarySourceJar', ':signLibraryJavaDocJar']
}
