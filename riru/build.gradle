import org.apache.tools.ant.DirectoryScanner
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

import java.security.MessageDigest

plugins {
    id 'com.android.application'
}

DirectoryScanner.removeDefaultExclude('**/.gitattributes')

def versionNameShort = "v${riruApiVersion}.${versionNameMinor}.${versionNamePatch}"
def versionName = "${versionNameShort}.r${gitCommitCount}.${gitCommitId}"
def versionCode = gitCommitCount

def apiVersion = rootProject.ext.riruApiVersion
def minApiVersion = rootProject.ext.riruMinApiVersion
def moduleProps = [
        id         : "riru-core",
        name       : "Riru",
        version    : "$versionName",
        versionCode: "$versionCode",
        author     : "Rikka",
        description: "Inject into zygote and run codes from \"Riru\" modules in apps or the system server.",
        riruApi    : "$apiVersion",
        riruMinApi : "$minApiVersion"
]

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        externalNativeBuild {
            cmake {
                arguments "-DRIRU_VERSION_NAME:STRING=$versionNameShort",
                        "-DRIRU_VERSION_CODE:STRING=$versionCode",
                        "-DRIRU_API_VERSION=$apiVersion",
                        "-DRIRU_MIN_API_VERSION=$minApiVersion",
                        "-DANDROID_STL=none"
            }
        }
        multiDexEnabled false
        buildConfigField "int", "RIRU_API_VERSION", "$apiVersion"
        buildConfigField "int", "RIRU_VERSION_CODE", "$versionCode"
        buildConfigField "String", "RIRU_VERSION_NAME", "\"$versionNameShort\""
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    lintOptions.checkReleaseBuilds false
    dependenciesInfo.includeInApk false
}

repositories {
    mavenLocal()
}

dependencies {
    implementation 'dev.rikka.ndk.thirdparty:xhook:1.2.0'
    implementation 'dev.rikka.ndk.thirdparty:cxx:1.1.0'
    implementation 'dev.rikka.ndk.thirdparty:proc-maps-parser:1.0.0'
    implementation 'dev.rikka.rikkax.io:little-endian-data-stream:1.0.1'
    implementation 'androidx.annotation:annotation:1.2.0'
    compileOnly project(':stub')
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "${project.name}.apk"
    }
}

afterEvaluate {
    android.applicationVariants.forEach { variant ->
        def variantCapped = variant.name.capitalize()
        def variantLowered = variant.name.toLowerCase()

        def zipName = "riru-${versionNameShort}-${variantLowered}.zip"
        def magiskDir = file("$outDir/magisk_module_$variantLowered")

        task("prepareMagiskFiles${variantCapped}", type: Sync) {
            dependsOn("assemble$variantCapped")
            dependsOn(":app:assemble$variantCapped")

            into magiskDir
            from("$rootDir/template/magisk_module") {
                include '.gitattributes'
                //defaultExcludes: 'no'
            }
            from("$rootDir/app/build/outputs/apk/$variantLowered/riru.apk") {
                rename { "app.apk" }
            }
            from("$rootDir/template/magisk_module") {
                exclude 'customize.sh', 'util_functions.sh', 'module.prop'
            }
            from("$rootDir/template/magisk_module") {
                include 'customize.sh', 'util_functions.sh'
                filter(ReplaceTokens.class, tokens: [
                        "RIRU_API"         : apiVersion.toString(),
                        "RIRU_VERSION_CODE": versionCode.toString(),
                        "RIRU_VERSION_NAME": versionName.toString()
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from("$rootDir/template/magisk_module") {
                include 'module.prop'
                expand moduleProps
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from("$buildDir/intermediates/stripped_native_libs/$variantLowered/out/lib") {
                into 'lib'
            }
            from((variantLowered == "release") ?
                    "$buildDir/intermediates/dex/$variantLowered/minify${variantCapped}WithR8" :
                    "$buildDir/intermediates/dex/$variantLowered/mergeDex$variantCapped") {
                include 'classes.dex'
                rename { 'rirud.dex' }
            }
            doLast {
                fileTree("$magiskDir").visit { f ->
                    if (f.directory) return
                    if (f.file.name == '.gitattributes') return

                    def md = MessageDigest.getInstance("SHA-256")
                    f.file.eachByte 4096, { bytes, size ->
                        md.update(bytes, 0, size)
                    }
                    file(f.file.path + ".sha256sum").text = md.digest().encodeHex()
                }
            }

        }

        task("zip${variantCapped}", type: Zip) {
            dependsOn("prepareMagiskFiles${variantCapped}")
            from magiskDir
            archiveName zipName
            destinationDir outDir
        }

        task("push${variantCapped}", type: Exec) {
            dependsOn("assemble${variantCapped}")
            workingDir outDir
            commandLine android.adbExecutable, "push", zipName, "/data/local/tmp/"
        }

        task("flash${variantCapped}", type: Exec) {
            dependsOn("push${variantCapped}")
            commandLine android.adbExecutable, "shell", "su", "-c", "magisk --install-module /data/local/tmp/${zipName}"
        }

        task("flashAndReboot${variantCapped}", type: Exec) {
            dependsOn("flash${variantCapped}")
            commandLine android.adbExecutable, "shell", "reboot"
        }

        variant.assembleProvider.get().dependsOn(":app:assemble${variantCapped}")
        variant.assembleProvider.get().finalizedBy("zip${variantCapped}")
    }
}

